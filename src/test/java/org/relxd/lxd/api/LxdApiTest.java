/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.api;


import com.google.gson.Gson;
import io.swagger.annotations.ApiResponse;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.junit.Before;
import org.mockito.Mockito;
import org.relxd.lxd.ApiException;
import org.relxd.lxd.model.*;
import org.junit.Test;
import org.junit.Ignore;
import org.relxd.lxd.service.linuxCmd.LinuxCmdService;
import org.relxd.lxd.service.linuxCmd.LinuxCmdServiceImpl;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;

import static org.junit.Assert.assertEquals;

/**
 * API tests for LxdApi
 */
public class LxdApiTest {

    private final LxdApi api = new LxdApi();
    public static final Logger LOG = Logger.getLogger(LxdApiTest.class);

    private LxdApi lxdApi;
    private LinuxCmdService linuxCmdService;

    @Before
    public void setup() {
        lxdApi = new LxdApi();
        linuxCmdService = spy(new LinuxCmdServiceImpl());
    }
    
    /**
     * 
     *
     * List of supported APIs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiListTest() throws ApiException {
        Integer recursion = null;
        String filter = null;
        List<String> response = api.getApiList(recursion, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Server configuration and environment information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServerStateTest() throws ApiException,IOException, InterruptedException {
        BasicConfigurator.configure();

        Integer recursion = 0;
        String filter = null;
        GetServerStateResponse serverStateResponse = new GetServerStateResponse();
        GetServerStateResponseMetadata metadata = new GetServerStateResponseMetadata();
        metadata.setApiStatus("SUCCESS");
        serverStateResponse.setMetadata(metadata);
        InputStream is = getClass().getResourceAsStream("/serverinfo.json");
        Gson gson = new Gson();
        GetServerStateResponseMetadata expectedServerInfo = gson.fromJson(new InputStreamReader(is), GetServerStateResponseMetadata.class);
        serverStateResponse.setMetadata(expectedServerInfo);
        Mockito.doReturn(serverStateResponse).when(linuxCmdService).executeLinuxCmdWithResultJsonObject("curl -s --unix-socket /var/lib/lxd/unix.socket a/1.0", GetServerStateResponse.class);
        GetServerStateResponse serverInfo = lxdApi.getServerState(recursion,filter);
        assertEquals(expectedServerInfo, serverInfo);
        final GetServerStateResponseMetadata serverInfoMetadata = serverInfo.getMetadata();

        if (serverInfoMetadata != null) {
            assertEquals("1.0", serverInfoMetadata.getApiVersion());
            assertEquals(true, serverInfoMetadata.getConfig().getCoreTrustPassword());
            assertEquals("2.0.0", serverInfoMetadata.getEnvironment().getServerVersion());
            assertEquals(Integer.valueOf(26227), serverInfoMetadata.getEnvironment().getServerPid());
        }
    }
    
    /**
     * 
     *
     * Updates the server configuration or other properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchServerStateTest() throws ApiException {
        Config1 body = null;
        BasicStandardReturnValueResponse response = api.patchServerState(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Replaces the server configuration or other properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putServerStateTest() throws ApiException {
        Config1 body = null;
        BasicStandardReturnValueResponse response = api.putServerState(body);

        // TODO: test validations
    }
    
}
