/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.api;

import com.google.gson.JsonSyntaxException;
import io.swagger.annotations.Api;
import org.relxd.lxd.ApiException;
import org.relxd.lxd.JSON;
import org.relxd.lxd.model.*;
import org.junit.Test;
import org.junit.Ignore;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static junit.framework.TestCase.*;

/**
 * API tests for ProfilesApi
 */

public class ProfilesApiTest {

    private final ProfilesApi api = new ProfilesApi();
    private final Logger logger = LoggerFactory.getLogger(SupportedApisApiTest.class);

    
    /**
     * 
     *
     * Remove a profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProfilesByNameTest() throws ApiException {
        String name = "";

        try {
            BackgroundOperationResponse response = api.deleteProfilesByName(name);
            logger.info("Delete Profiles By Name Test");
            assertEquals(Integer.valueOf(200), response.getStatusCode());
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }
    
    /**
     * 
     *
     * List of configuration profiles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProfilesTest(){

        Integer recursion = null;
        String filter = null;

        try {
            BackgroundOperationResponse response = api.getProfiles(recursion, filter);
            logger.info("Get Profiles Response >>>>> {}", response);
            assertEquals(response.getStatusCode(), Integer.valueOf(200));

        }catch (ApiException ex){
            catchApiException(ex);
        }


    }
    
    /**
     * 
     *
     * Profile configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProfilesByNameTest() {
        String name = "default";
        Integer recursion = null;
        String filter = null;

        try {
            BackgroundOperationResponse response = api.getProfilesByName(name, recursion, filter);
            logger.info("Get Profiles By Name Response >>>>>>> {}", response);
            assertEquals(response.getStatusCode(), Integer.valueOf(200));
        }catch (ApiException ex){
            catchApiException(ex);
        }


    }
    
    /**
     * 
     *
     * Update the profile information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchProfilesByNameTest() throws ApiException {
        String name = "default";
        UpdateProfilesByNameRequest request = new UpdateProfilesByNameRequest();
        request.setDescription("My description for the default profile");

        try {
            BackgroundOperationResponse response = api.patchProfilesByName(name, request);
            logger.info("Patch Profiles By Name Response >>>>>> {}", response);
            assertEquals(response.getStatusCode(), Integer.valueOf(200));
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }
    
    /**
     * 
     *
     * Define a new profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postProfilesTest() throws ApiException {

        MemoryLimitsConfig memoryLimitsConfig = new MemoryLimitsConfig();
        memoryLimitsConfig.setLimitsMemory("2GB");

        Kvm kvm = new Kvm();
        kvm.setType("unix-char");
        kvm.setPath("/dev/kvm");

        DevicesKvm devicesKvm = new DevicesKvm();
        devicesKvm.setKvm(kvm);

        CreateProfilesRequest request = new CreateProfilesRequest();
        request.setName("profile1");
        request.setDescription("This is another profile");
        request.setConfig(memoryLimitsConfig);
        request.setDevices(devicesKvm);

        try {
            BackgroundOperationResponse response = api.postProfiles(request);
            logger.info("Post Profiles Response >>>>>>> {}", response);
            assertEquals(Integer.valueOf(200), response.getStatusCode());
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }
    
    /**
     * 
     *
     * Rename a profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postProfilesByNameTest() throws ApiException {
        String name = "profile1";
        CreateProfilesByNameRequest request = new CreateProfilesByNameRequest();
        request.setName("profile1rename");

        try {
            BackgroundOperationResponse response = api.postProfilesByName(name, request);
            logger.info("Post Profiles By Name Response >>>>> {}", response);
            assertEquals(Integer.valueOf(200), response.getStatusCode());
        }catch (ApiException ex){
            catchApiException(ex);
        }
    }
    
    /**
     * 
     *
     * Replace the profile information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putProfilesByNameTest() throws ApiException {
        String name = "profile1rename";
        UpdateProfilesByNameRequest request = new UpdateProfilesByNameRequest();
        request.setDescription("A new description for Profile1rename");

        try {
            BackgroundOperationResponse response = api.putProfilesByName(name, request);
            logger.info("Put Profiles By Name Response >>>>>> {}", response);
            assertEquals(Integer.valueOf(200), response.getStatusCode());
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }

    private ErrorResponse catchApiException(ApiException e) {
        JSON json = new JSON();
        ErrorResponse errorResponse = new ErrorResponse();
        try {
            errorResponse = json.deserialize(e.getResponseBody(), ErrorResponse.class);
            logger.info("ERROR RESPONSE >>>> " + errorResponse);
        }catch (JsonSyntaxException ex){

        }
        return errorResponse;
    }
    
}
