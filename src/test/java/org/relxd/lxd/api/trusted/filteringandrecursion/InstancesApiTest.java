/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.api.trusted.filteringandrecursion;

import com.google.gson.JsonSyntaxException;
import org.junit.After;
import org.junit.jupiter.api.*;
import org.relxd.lxd.ApiException;
import org.relxd.lxd.JSON;
import org.relxd.lxd.RelxdApiClient;
import org.relxd.lxd.api.InstancesApi;
import org.relxd.lxd.model.*;
import org.relxd.lxd.service.linuxCmd.LinuxCmdService;
import org.relxd.lxd.service.linuxCmd.LinuxCmdServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertTrue;
import static org.mockito.Mockito.spy;

/**
 * API tests for InstancesApi
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class InstancesApiTest {

    private InstancesApi api;
    private Logger logger;
    private List<String> actualGetInstancesResponseUrls;

    private LinuxCmdService linuxCmdService;
    private String unixSocketPath;
    private RelxdApiClient apiClient;

    @BeforeEach
    public void setup() {

        linuxCmdService = spy(new LinuxCmdServiceImpl());
        api = new InstancesApi();
        logger = LoggerFactory.getLogger(InstancesApiTest.class);
        apiClient = new RelxdApiClient();
        unixSocketPath = apiClient.getApplicationProperties().getProperty("unix.socket.base.path");
    }

    /**
     *
     *
     * Return a list of URLs for instances this server hosts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(2)
    public void getInstancesTest() {
        final String getInstancesCommand = "curl -s --unix-socket " + unixSocketPath + " a/1.0/instances";

        Integer recursion = null;
        String filter = null;

        try
        {

            final BackgroundOperationResponse expectedBackgroundOperationResponse = linuxCmdService.executeLinuxCmdWithResultJsonObject(getInstancesCommand, BackgroundOperationResponse.class);
            logger.info("Expected Get Instances Response >>>>>>>>>> " + expectedBackgroundOperationResponse);

            final BackgroundOperationResponse actualBackgroundOperationResponse = api.getInstances(recursion, filter);
            logger.info("Actual Get Instances Response >>>>>>>>>> " + actualBackgroundOperationResponse);

            if (actualBackgroundOperationResponse != null){
                actualGetInstancesResponseUrls = (List<String>) actualBackgroundOperationResponse.getMetadata();

                logger.info("Metadata >>>>>>> {}", actualGetInstancesResponseUrls);
            }

            assertEquals(expectedBackgroundOperationResponse, actualBackgroundOperationResponse);

        } catch (IOException | InterruptedException e)
        {
            e.printStackTrace();
        } catch (ApiException ex){
            catchApiException(ex);
        }

    }

    /**
     *
     *
     * Get Instance information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(4)
    public void getInstancesByNameTest() {
        final String getInstancesByNameCommand = "curl -s --unix-socket " +unixSocketPath+ " a/1.0/instances/ubuntu-instance";
        String name = "ubuntu-instance";
        Integer recursion = null;
        String filter = null;

        try
        {

            final BackgroundOperationResponse expectedInstancesByNameResponse = linuxCmdService.executeLinuxCmdWithResultJsonObject(getInstancesByNameCommand, BackgroundOperationResponse.class);
            logger.info("Expected Get Instances Response >>>>>>>>>> " + expectedInstancesByNameResponse);

            final BackgroundOperationResponse actualInstancesByNameResponse = api.getInstancesByName(name,recursion, filter);
            logger.info("Actual Get Instances Response >>>>>>>>>> " + actualInstancesByNameResponse);

            assertEquals(expectedInstancesByNameResponse, actualInstancesByNameResponse);

        } catch (IOException | InterruptedException e)
        {
            e.printStackTrace();
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }

    /**
     *
     *
     * List of backups for the instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(6)
    public void getInstancesByNameBackupsTest() throws ApiException {
        String getInstancesByNameBackupsCommand = "curl -s --unix-socket " + unixSocketPath + " a/1.0/instances/lxd-instance/backups/ubuntu-instance-backup";
        String name = "ubuntu-instance-backup";
        Integer recursion = null;
        String filter = null;

        try {

            final BackgroundOperationResponse expectedInstancesByNameResponse = linuxCmdService.executeLinuxCmdWithResultJsonObject(getInstancesByNameBackupsCommand, BackgroundOperationResponse.class);
            logger.info("Expected Get Instances Response >>>>>>>>>> " + expectedInstancesByNameResponse);

            final BackgroundOperationResponse actualInstancesByNameResponse = api.getInstancesByNameBackups(name, recursion, filter);
            logger.info("Actual Get Instances Response >>>>>>>>>> " + actualInstancesByNameResponse);

            assertEquals(expectedInstancesByNameResponse, actualInstancesByNameResponse);
        } catch (IOException | InterruptedException e){
            e.printStackTrace();
        }catch (ApiException ex){
            catchApiException(ex);
        }


    }

    /**
     *
     *
     * Backup information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(8)
    public void getInstancesByNameBackupsByNameTest() {
        String name = "ubuntu-instance";
        String backupsName = "ubuntu-instance-backup-rename";
        Integer recursion = null;
        String filter = null;

        try{
        BackgroundOperationResponse response = api.getInstancesByNameBackupsByName(name, backupsName, recursion, filter);
        logger.info("GET INSTANCES BY NAME BACKUPS BY NAME RESPONSE >>>> " + response);
        assertEquals(response.getStatusCode(),Integer.valueOf(200));
        } catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Fetch the backup tarball
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(9)
    public void getInstancesByNameBackupsByNameExportTest() {
        String name = "ubuntu-instance";
        String backupsName = "ubuntu-instance-backup";
        Integer recursion = null;
        String filter = null;

        try {
            BackgroundOperationResponse response = api.getInstancesByNameBackupsByNameExport(name, backupsName, recursion, filter);
            logger.info("Get Instances By Name Backups By Name Export Response >>>>> " + response);
        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Returns the contents of the instance&#39;s console log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(11)
    public void getInstancesByNameConsoleTest() {
        String name = "ubuntu-instance";
        Integer recursion = null;
        String filter = null;

        try {
            BackgroundOperationResponse response = api.getInstancesByNameConsole(name, recursion, filter);
            logger.info("GET INSTANCES BY NAME CONSOLE RESPONSE >>>>> " + response);
            assertEquals(response.getStatusCode(), Integer.valueOf(200));
        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Download a file or directory listing from the instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(13)
    public void getInstancesByNameFilesTest(){
        String name = "ubuntu-instance";
        Integer recursion = null;
        String filter = null;
        String path = "/";
        Integer xLXDUid = null;
        Integer xLXDGid = null;
        Integer xLXDMode = null;
        UUID xLXDType = null;

        try {
            RawFile response = api.getInstancesByNameFiles(name, recursion, filter, path, xLXDUid, xLXDGid, xLXDMode, xLXDType);
            logger.info("GET INSTANCES BY NAME FILES >>>>> {}", response);
            assertEquals(response.getStatusCode(),Integer.valueOf(200));
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }

    /**
     *
     *
     * Returns a list of the log files available for this instance. Note that this works on instances that have been deleted (or were never created) to enable people to get logs for failed creations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(14)
    public void getInstancesByNameLogsTest() throws ApiException {
        String name = "ubuntu-instance";
        Integer recursion = null;
        String filter = null;

        try {
            BackgroundOperationResponse response = api.getInstancesByNameLogs(name, recursion, filter);
            logger.info("GET INSTANCES BY NAME LOGS RESPONSE >>>>> {}" , response);
            assertEquals(response.getStatusCode(),Integer.valueOf(200));
        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Returns the contents of a particular log file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(15)
    public void getInstancesByNameLogsFileTest() {
        String name = "ubuntu-instance";
        String logFile = "lxc.log";
        Integer recursion = null;
        String filter = null;

        try {
            BackgroundOperationResponse response = api.getInstancesByNameLogsFile(name, logFile, recursion, filter);
            logger.info("INSTANCES BY NAME LOGS FILE RESPONSE >>>>> {}", response);
            if (response != null)
            assertEquals(response.getStatusCode(),Integer.valueOf(200));
        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Instance metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(26)
    public void getInstancesByNameMetadataTest() {
        String name = "ubuntu-instance";
        Integer recursion = null;
        String filter = null;

        try {
            BackgroundOperationResponse response = api.getInstancesByNameMetadata(name, recursion, filter);
            logger.info("GET INSTANCES BY NAME METADATA RESPONSE >>>>>> {}", response);

            if (response != null)
            assertEquals(Integer.valueOf(200),response.getStatusCode());

        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * List instance templates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(17)
    public void getInstancesByNameMetadataTemplatesTest() {
        String name = "ubuntu-instance";
        Integer recursion = null;
        String filter = null;
        String path = null;

        try {
            BackgroundOperationResponse response = api.getInstancesByNameMetadataTemplates(name, recursion, filter, path);
            logger.info("GET INSTANCES BY NAME METADATA TEMPLATES RESPONSE >>>>> {}", response);
            if (response != null)
            assertEquals(Integer.valueOf(200), response.getStatusCode());
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }

    /**
     *
     *
     * List of snapshots
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(20)
    public void getInstancesByNameSnapshotsTest() {
        String name = "ubuntu-instance";
        Integer recursion = null;
        String filter = null;

        try {
            BackgroundOperationResponse response = api.getInstancesByNameSnapshots(name, recursion, filter);
            logger.info("GET INSTANCES BY NAME SNAPSHOTS >>>>> {} ", response);
            assertEquals(response.getStatusCode(),Integer.valueOf(200));
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }

    /**
     *
     *
     * Snapshot information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(22)
    public void getInstancesByNameSnapshotsInformationTest() {
        String name = "ubuntu-instance";
        String snapshotName = "ubuntu-instance-snapshot";
        Integer recursion = null;
        String filter = null;

        try {
            BackgroundOperationResponse response = api.getInstancesByNameSnapshotsInformation(name, snapshotName, recursion, filter);
            logger.info("GET INSTANCES BY NAME SNAPSHOTS INFORMATION RESPONSE >>>>> {}", response);
            assertEquals(response.getStatusCode(),Integer.valueOf(200));
        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Current state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(24)
    public void getInstancesByNameStateTest(){
        String name = "ubuntu-instance";
        Integer recursion = null;
        String filter = null;

        try {
            BackgroundOperationResponse response = api.getInstancesByNameState(name, recursion, filter);
            logger.info("GET INSTANCE BY NAME STATE TEST >>>>>>>> " + response);
            assertEquals(response.getStatusCode(), Integer.valueOf(200));
        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Create a new instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(1)
    public void postInstancesTest() {
        String target = null;

        Kvm kvm = new Kvm();
        kvm.setPath("/dev/kvm");
        kvm.setType("unix-char");

        Source source = new Source();
        source.setType("none");

        DevicesKvm devices = new DevicesKvm();
        devices.setKvm(kvm);

        CreateInstancesRequestConfig createInstancesRequestConfig = new CreateInstancesRequestConfig();
        createInstancesRequestConfig.setLimitsCpu("2");

        List<String> profiles = new ArrayList<>();
        profiles.add("default");

        CreateInstancesRequest createInstancesRequest = new CreateInstancesRequest();
        createInstancesRequest.setName("ubuntu-instance");
        createInstancesRequest.setArchitecture("x86_64");
        createInstancesRequest.setProfiles(profiles);
        createInstancesRequest.setEphemeral(true);
        createInstancesRequest.setConfig(createInstancesRequestConfig);
        createInstancesRequest.setType("container");
        createInstancesRequest.setDevices(devices);
        createInstancesRequest.setSource(source);

        try {
            BackgroundOperationResponse actualCreateInstancesResponse = api.postInstances(target, createInstancesRequest);
            logger.info("Create Instance Response >>>>>>>>>> " + actualCreateInstancesResponse);
            assertTrue((actualCreateInstancesResponse.getStatusCode() == Integer.valueOf(200)) ||
                    actualCreateInstancesResponse.getStatusCode() == Integer.valueOf(100));
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }
    /**
     *
     *
     * Used to rename/migrate the instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(3)
    public void postInstancesByNameTest() {

        String name = "ubuntu-instance";
        String target = null;
        CreateInstancesByNameRequest createInstancesByNameRequest = new CreateInstancesByNameRequest();
        createInstancesByNameRequest.setName("another-ubuntu-instance");

        try {
            BackgroundOperationResponse response = api.postInstancesByName(name, target, createInstancesByNameRequest);
            logger.info("RESPONSE >>>>>>>>> " + response);
            assertEquals(response.getStatusCode(), Integer.valueOf(100));
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }

    /**
     *
     *
     * Create a new backup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(5)
    public void postInstancesByNameBackupsTest() {
        String name = "ubuntu-instance";
        CreateInstancesByNameBackupsRequest createInstancesByNameBackupsRequest = new CreateInstancesByNameBackupsRequest();
        createInstancesByNameBackupsRequest.setName("ubuntu-instance-backup");
        createInstancesByNameBackupsRequest.setExpiry(new BigDecimal(3600));
        createInstancesByNameBackupsRequest.setInstanceOnly(true);
        createInstancesByNameBackupsRequest.setOptimizedStorage(true);

        try {
            BackgroundOperationResponse response = api.postInstancesByNameBackups(name, createInstancesByNameBackupsRequest);
            logger.info("POST INSTANCE BACKUP RESPONSE >>>>> " + response);
            assertEquals(response.getStatusCode(), Integer.valueOf(100));
        }catch (ApiException ex){
            catchApiException(ex);
        }

    }

    /**
     *
     *
     * Used to rename the backup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(7)
    public void postInstancesByNameBackupsByNameTest() {
        String name = "ubuntu-instance";
        String backupsName = "ubuntu-instance-backup";
        CreateInstancesByNameBackupsByNameRequest request = new CreateInstancesByNameBackupsByNameRequest();
        request.setName("ubuntu-instance-backup-rename");

        try {
            BackgroundOperationResponse response = api.postInstancesByNameBackupsByName(name, backupsName, request);
            logger.info("POST INSTANCES BY NAME BACKUPS BY NAME RESPONSE >>>>> " + response);
            assertEquals(response.getStatusCode(), Integer.valueOf(100));
        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Attach to an instance&#39;s console devices
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(10)
    public void postInstancesByNameConsoleTest() {
        String name = "ubuntu-instance";
        CreateInstancesByNameConsoleRequest request = new CreateInstancesByNameConsoleRequest();
        request.setWidth(80);
        request.setHeight(25);
        request.setType("console");

        try {
            BackgroundOperationResponse response = api.postInstancesByNameConsole(name, request);
            assertEquals(response.getStatusCode(), Integer.valueOf(100));
            logger.info("POST INSTANCES BY NAME CONSOLE RESPONSE >>>> " + response);
        }catch (ApiException e){
            catchApiException(e);
        }
    }

    /**
     *
     *
     * Run a remote command
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(12)
    public void postInstancesByNameExecTest() {
        String name = "ubuntu-instance";
        List<String> command = new ArrayList<>();
        command.add("/bin/bash");
        Environment environment = new Environment();
        CreateInstancesByNameExecRequest request = new CreateInstancesByNameExecRequest();
        request.setCommand(command);
        request.setEnvironment(environment);
        request.setWaitForWebsocket(false);
        request.setRecordOutput(false);
        request.setInteractive(true);
        request.setWidth(80);
        request.setHeight(25);
        request.setUser(1000);
        request.setGroup(1000);
        request.setCwd("/tmp");

        try {
            BackgroundOperationResponse response = api.postInstancesByNameExec(name, request);
            logger.info("POST INSTANCES BY NAME RESPONSE >>>>> " + response);
            assertEquals(response.getStatusCode(),Integer.valueOf(100));
        }catch (ApiException e){
            catchApiException(e);
        }

    }

    /**
     *
     *
     * Upload a file to the instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(12)
    public void postInstancesByNameFilesTest() {

        UUID uuid = new UUID(10,00);

        String name = "ubuntu-instance";
        String path = "/data";
        Integer xLXDUid = 0;
        Integer xLXDGid = 0;
        Integer xLXDMode = 0700;
        UUID xLXDWrite = uuid;
        String xLXDType = "file";

        try {
            File body = new File("./myfile");
            BackgroundOperationResponse response = api.postInstancesByNameFiles(name, path, xLXDUid, xLXDGid, xLXDMode, xLXDWrite, xLXDType, body);
            logger.info("POST INSTANCES BY NAME FILES RESPONSE >>>> " + response);
            assertEquals(response.getStatusCode(),Integer.valueOf(100));
        }
        catch (ApiException e){
            catchApiException(e);
        }
    }

    /**
     *
     *
     * Add a container template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(16)
    public void postInstancesByNameMetadataTemplatesTest() {
        String name = "ubuntu-instance";
        String path = "";
        File body = new File("");

        try {
            BackgroundOperationResponse response = api.postInstancesByNameMetadataTemplates(name, path, body);
            logger.info("POST INSTANCES BY NAME METADATA RESPONSE >>>>> " + response);

        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Create a new snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(19)
    public void postInstancesByNameSnapshotTest() {
        String name = "ubuntu-instance";
        CreateInstancesByNameSnapshotRequest request = new CreateInstancesByNameSnapshotRequest();
        request.setName("ubuntu-instance-snapshot");
        request.setStateful(true);

        try {
            BackgroundOperationResponse response = api.postInstancesByNameSnapshot(name, request);
            logger.info("POST INSTANCES BY NAME RESPONSE >>>>> " + response);
            assertEquals(Integer.valueOf(200), response.getStatusCode());
        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Used to rename/migrate the snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(21)
    public void postInstancesByNameSnapshotsInformationTest() {
        String name = "ubuntu-instance";
        String snapshotName = "ubuntu-instance-snapshot";
        CreateInstancesByNameSnapshotsInformationRequest request = new CreateInstancesByNameSnapshotsInformationRequest();
        request.setName("ubuntu-instance-snapshot");

        try {

            BackgroundOperationResponse response = api.postInstancesByNameSnapshotsInformation(name, snapshotName, request);
            logger.info("SNAPSHOT INFORMATION RESPONSE >>>>>> ", response);
            assertEquals(Integer.valueOf(100), response.getStatusCode());
        }catch (ApiException ex){
            catchApiException(ex);
        }
    }

    /**
     *
     *
     * Change the instance state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(23)
    public void putInstancesByNameStateTest() throws ApiException {

        String name = "ubuntu-instance";
        UpdateInstancesByNameStateRequest request = new UpdateInstancesByNameStateRequest();
        request.setAction("start");
        request.setForce(true);
        request.setTimeout(new BigDecimal(30));
        request.setStateful(true);

        try {
            BackgroundOperationResponse response = api.putInstancesByNameState(name, request);
            logger.info("PUT INSTANCES BY NAME STATE RESPONSE >>>>> " + response);
            assertEquals(response.getStatusCode(),Integer.valueOf(100));
        }catch (ApiException ex){
            catchApiException(ex);
        }


    }

    private ErrorResponse catchApiException(ApiException e) {
        logger.info("Exception >>>> " + e);
        JSON json = new JSON();
        ErrorResponse errorResponse = new ErrorResponse();
        try {
             errorResponse = json.deserialize(e.getResponseBody(), ErrorResponse.class);
            logger.info("ERROR RESPONSE >>>> " + errorResponse);
        }catch (JsonSyntaxException ex){

        }
        return errorResponse;
    }

}